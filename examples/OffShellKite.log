#I  A>> singular> matrix homalg_variable_m[796][1]; homalg_variable_s="["; for(int i=1;i<=756;i++) {homalg_variable_m=homalg_variable_3562[1..796,i]; if(i!=1){homalg_variable_s=homalg_variable_s+",";}; homalg_variable_s=homalg_variable_s+"["+string(homalg_variable_m)+"]";}; homalg_variable_s=homalg_variable_s+"]"; write("w: /tmp/gaptempdirtDtd7X/homalg_variable_3562_PID_4145198",homalg_variable_s); kill homalg_variable_m; homalg_variable_s="";
#I  A<< julia> homalg_variable_s=read("/tmp/gaptempdirtDtd7X/homalg_variable_3562_PID_4145198", String); homalg_variable_r=[]; for i = split(homalg_variable_s, r"[\[,\]\n\r]+"); if length(i)>0; push!(homalg_variable_r, eval(Meta.parse(replace(i, "/" => "//")))); end; end; homalg_variable_17=Involution(MatrixForHomalg(homalg_variable_5,756,796, homalg_variable_r)); homalg_variable_s=""; homalg_variable_r="";0
#I  BUSY> RowEchelonForm 756 x 796 : Z(m,d,s,a1,a2,a3,a4,a5)
#I  ref julia> homalg_variable_18 = RowEchelonForm(homalg_variable_17; ignore = 0);0
#I  0== julia> ZeroRows(homalg_variable_18)
#I  /------------------
#I  <julia "[]"
#I  \==================
#I  #== julia> ncols(homalg_variable_18)
#I  /------------------
#I  <julia "587"
#I  \==================
#I  <DONE RowEchelonForm 587     in  0:00:00.025 h
#I  ||| julia> homalg_variable_19 = CertainColumns(homalg_variable_18, 1:692);0
#I  0== julia> ZeroRows(homalg_variable_19)
#I  /------------------
#I  <julia "[533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587]"
#I  \==================
#I  === julia> homalg_variable_20 = CertainRows(homalg_variable_18, 533:587);0
#I  ||| julia> homalg_variable_21 = CertainColumns(homalg_variable_20, 777:796);0
#I  0== julia> ZeroRows(homalg_variable_21)
#I  /------------------
#I  <julia "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,31,32,33,34,35,36]"
#I  \==================
#I  ||| julia> homalg_variable_22 = CertainColumns(homalg_variable_20, 693:796);0
#I  === julia> homalg_variable_23 = CertainRows(homalg_variable_22, [ 29, 30, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55 ]);0
#I  0|| julia> ZeroColumns(homalg_variable_23)
#I  /------------------
#I  <julia "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,90,104]"
#I  \==================

brk> Y;
Q[m,d,s][a1,a2,a3,a4,a5]<D1,D1_,D2,D2_,D3,D3_,D4,D4_,D5,D5_>/( D5*D5_-1, D4*D4_-1, D3*D3_-1, D2*D2_-1, D1*D1_-1 )
brk> BaseRing( AmbientRing( Y ) );
Q[m,d,s][a1,a2,a3,a4,a5]
brk> mat;
[ <A 756 x 796 matrix over an external ring>, <An unevaluated right invertible sub-identity 104 x 796 matrix over an external ring>,
  [ D1_^2*D2^4, D1*D2_*D3_*D4^3, D1_^2*D2^2*D3^2, D1_*D2^4*D3_, D1^3*D2*D3_^2, D1^2*D2^2*D3_^2, D1*D2^3*D3_^2, D2^4*D3_^2, D1_^2*D2^3*D4, D1^3*D2_^2*D4,
      D1_^2*D2^2*D3*D4, D1^2*D2_^2*D3*D4, D1_^2*D2*D3^2*D4, D1_*D2^3*D3_*D4, D1^3*D2_*D3_*D4, D1^3*D3_^2*D4, D1^2*D2*D3_^2*D4, D1*D2^2*D3_^2*D4, D2^3*D3_^2*D4,
      D1_^2*D2^2*D4^2, D1^2*D2_^2*D4^2, D1_^2*D2*D3*D4^2, D1_*D2^2*D3_*D4^2, D1^2*D2_*D3_*D4^2, D1^2*D3_^2*D4^2, D1*D2*D3_^2*D4^2, D2^2*D3_^2*D4^2, D1_^2*D2*D4^3,
      D1*D2_^2*D4^3, D1_*D2*D3_*D4^3, D1_^2*D2^3*D3, D1*D3_^2*D4^3, D2*D3_^2*D4^3, D1_*D2^4*D4_, D1_*D2^3*D3*D4_, D1_*D2^2*D3^2*D4_, D1^3*D2*D3_*D4_, D1^2*D2^2*D3_*D4_,
      D1*D2^3*D3_*D4_, D2^4*D3_*D4_, D1^3*D2*D4_^2, D1^2*D2^2*D4_^2, D1*D2^3*D4_^2, D2^4*D4_^2, D1^2*D2*D3*D4_^2, D1*D2^2*D3*D4_^2, D2^3*D3*D4_^2, D1*D2*D3^2*D4_^2,
      D2^2*D3^2*D4_^2, D1_^2*D2^2*D3*D5, D1_^2*D2^2*D4*D5, D1_^2*D2*D3*D4*D5, D1_*D2^2*D3_*D4*D5, D1*D2*D3_^2*D4*D5, D2^2*D3_^2*D4*D5, D1_^2*D2*D4^2*D5,
      D1_*D2*D3_*D4^2*D5, D2*D3_^2*D4^2*D5, D1_*D2^2*D3*D4_*D5, D1*D2*D3*D4_^2*D5, D2^2*D3*D4_^2*D5, D1_*D2^4*D5_, D1_*D2^3*D3*D5_, D1_*D2^2*D3^2*D5_, D1^3*D2*D3_*D5_,
      D1^2*D2^2*D3_*D5_, D1*D2^3*D3_*D5_, D2^4*D3_*D5_, D1_*D2^3*D4*D5_, D1^3*D2_*D4*D5_, D1_*D2^2*D3*D4*D5_, D1^2*D2_*D3*D4*D5_, D1_*D2*D3^2*D4*D5_, D1^3*D3_*D4*D5_,
      D1^2*D2*D3_*D4*D5_, D1*D2^2*D3_*D4*D5_, D2^3*D3_*D4*D5_, D1_*D2^2*D4^2*D5_, D1^2*D2_*D4^2*D5_, D1_*D2*D3*D4^2*D5_, D1^2*D3_*D4^2*D5_, D1*D2*D3_*D4^2*D5_,
      D2^2*D3_*D4^2*D5_, D1_*D2*D4^3*D5_, D1*D2_*D4^3*D5_, D1*D3_*D4^3*D5_, D2*D3_*D4^3*D5_, D1^3*D2*D4_*D5_, D1^2*D2^2*D4_*D5_, D2*D4^3*D5_^2, D2^4*D4_*D5_,
      D1^2*D2*D3*D4_*D5_, D1*D2^2*D3*D4_*D5_, D2^3*D3*D4_*D5_, D1*D2*D3^2*D4_*D5_, D2^2*D3^2*D4_*D5_, D1^3*D2*D5_^2, D1^2*D2^2*D5_^2, D1*D2^3*D5_^2, D2^4*D5_^2,
      D1^2*D2*D3*D5_^2, D1*D2^2*D3*D5_^2, D2^3*D3*D5_^2, D1*D2*D3^2*D5_^2, D2^2*D3^2*D5_^2, D1^3*D4*D5_^2, D1^2*D2*D4*D5_^2, D1*D2^2*D4*D5_^2, D2^3*D4*D5_^2,
      D1^2*D3*D4*D5_^2, D1*D2*D3*D4*D5_^2, D2^2*D3*D4*D5_^2, D2*D3^2*D4*D5_^2, D1^2*D4^2*D5_^2, D1*D2*D4^2*D5_^2, D2^2*D4^2*D5_^2, D2*D3*D4^2*D5_^2, D1*D4^3*D5_^2,
      D1*D2^3*D4_*D5_, D2*D4_^2*D5^2, D2*D3^2*D4_*D5_, D1*D3^2*D4_*D5_, D1*D2*D3_*D4*D5, D2^2*D3*D4_*D5_, D2*D3_*D4^3, D1_*D2^3*D3, D1^2*D2_^2*D3, D1_^2*D2*D3^2,
      D1_*D2^2*D3^2, D1*D2_^2*D3^2, D1_^2*D3^3, D1_*D2_*D3^3, D2_^2*D3^3, D1^3*D2*D3_, D1^2*D2^2*D3_, D1*D2^3*D3_, D1_*D2^3*D3_, D2^4*D3_, D1^2*D2*D3_^2, D1*D2^2*D3_^2,
      D2^3*D3_^2, D1_^2*D2^2*D4, D1_*D2^3*D4, D1^3*D2_*D4, D1^2*D2_^2*D4, D1_^2*D2*D3*D4, D1_*D2^2*D3*D4, D1^2*D2_*D3*D4, D1*D2_^2*D3*D4, D1_^2*D3^2*D4, D1_*D2*D3^2*D4,
      D1_*D2_*D3^2*D4, D2_^2*D3^2*D4, D1^3*D3_*D4, D1^2*D2*D3_*D4, D1*D2^2*D3_*D4, D1_*D2^2*D3_*D4, D2^3*D3_*D4, D1^2*D2_*D3_*D4, D1^2*D3_^2*D4, D1*D2*D3_^2*D4,
      D2^2*D3_^2*D4, D1_^2*D2*D4^2, D1_*D2^2*D4^2, D1^2*D2_*D4^2, D1*D2_^2*D4^2, D1_^2*D3*D4^2, D1_*D2*D3*D4^2, D1_*D2_*D3*D4^2, D2_^2*D3*D4^2, D1^2*D3_*D4^2,
      D1*D2*D3_*D4^2, D1_*D2*D3_*D4^2, D2^2*D3_*D4^2, D1*D2_*D3_*D4^2, D1*D3_^2*D4^2, D2*D3_^2*D4^2, D1_^2*D4^3, D1_*D2*D4^3, D1*D2_*D4^3, D1_*D2_*D4^3, D2_^2*D4^3,
      D1*D3_*D4^3, D1_*D3_*D4^3, D1_^2*D2^2*D3, D2_*D3_*D4^3, D3_^2*D4^3, D1^3*D2*D4_, D1^2*D2^2*D4_, D1*D2^3*D4_, D1_*D2^3*D4_, D2^4*D4_, D1^2*D2*D3*D4_,
      D1*D2^2*D3*D4_, D1_*D2^2*D3*D4_, D2^3*D3*D4_, D1^2*D2_*D3*D4_, D1*D2*D3^2*D4_, D1_*D2*D3^2*D4_, D2^2*D3^2*D4_, D1*D2_*D3^2*D4_, D1_*D3^3*D4_, D2_*D3^3*D4_,
      D1^2*D2*D3_*D4_, D1*D2^2*D3_*D4_, D2^3*D3_*D4_, D1^2*D2*D4_^2, D1*D2^2*D4_^2, D2^3*D4_^2, D1^2*D3*D4_^2, D1*D2*D3*D4_^2, D2^2*D3*D4_^2, D1*D3^2*D4_^2,
      D2*D3^2*D4_^2, D3^3*D4_^2, D1_^2*D2^2*D5, D1^2*D2_^2*D5, D1_^2*D2*D3*D5, D1_*D2^2*D3*D5, D1*D2_^2*D3*D5, D1_^2*D3^2*D5, D1_*D2_*D3^2*D5, D2_^2*D3^2*D5,
      D1_*D2^2*D3_*D5, D1^2*D2_*D3_*D5, D1^2*D3_^2*D5, D1*D2*D3_^2*D5, D2^2*D3_^2*D5, D1_^2*D2*D4*D5, D1_*D2^2*D4*D5, D1*D2_^2*D4*D5, D1_^2*D3*D4*D5, D1_*D2*D3*D4*D5,
      D1_*D2_*D3*D4*D5, D1_*D2^4, D2^2*D3_*D4*D5, D1*D2_*D3_*D4*D5, D1*D3_^2*D4*D5, D2*D3_^2*D4*D5, D1_^2*D4^2*D5, D1_*D2*D4^2*D5, D1_*D2_*D4^2*D5, D2_^2*D4^2*D5,
      D1_*D3_*D4^2*D5, D2*D3_*D4^2*D5, D2_*D3_*D4^2*D5, D3_^2*D4^2*D5, D1_*D2^2*D4_*D5, D1^2*D2_*D4_*D5, D1*D2*D3*D4_*D5, D1_*D2*D3*D4_*D5, D2^2*D3*D4_*D5,
      D1*D2_*D3*D4_*D5, D1_*D3^2*D4_*D5, D2_*D3^2*D4_*D5, D1^2*D3_*D4_*D5, D1*D2*D3_*D4_*D5, D2^2*D3_*D4_*D5, D1^2*D4_^2*D5, D1*D2*D4_^2*D5, D2^2*D4_^2*D5,
      D1*D3*D4_^2*D5, D2*D3*D4_^2*D5, D3^2*D4_^2*D5, D1_^2*D2*D5^2, D1*D2_^2*D5^2, D1_^2*D3*D5^2, D1_*D2_*D3*D5^2, D2_^2*D3*D5^2, D1_*D2*D3_*D5^2, D1*D2_*D3_*D5^2,
      D1*D3_^2*D5^2, D2*D3_^2*D5^2, D1_^2*D4*D5^2, D1_*D2_*D4*D5^2, D2_^2*D4*D5^2, D1_*D3_*D4*D5^2, D2_*D3_*D4*D5^2, D3_^2*D4*D5^2, D1_*D2*D4_*D5^2, D1*D2_*D4_*D5^2,
      D1_*D3*D4_*D5^2, D2_*D3*D4_*D5^2, D1*D3_*D4_*D5^2, D2*D3_*D4_*D5^2, D1*D4_^2*D5^2, D1_^2*D2^3, D3*D4_^2*D5^2, D1^3*D2*D5_, D1^2*D2^2*D5_, D1*D2^3*D5_,
      D1_*D2^3*D5_, D2^4*D5_, D1^2*D2*D3*D5_, D1*D2^2*D3*D5_, D1_*D2^2*D3*D5_, D2^3*D3*D5_, D1^2*D2_*D3*D5_, D1*D2*D3^2*D5_, D1_*D2*D3^2*D5_, D2^2*D3^2*D5_,
      D1*D2_*D3^2*D5_, D1_*D3^3*D5_, D2_*D3^3*D5_, D1^2*D2*D3_*D5_, D2^2*D4^2*D5_, D2^3*D3_*D5_, D1^3*D4*D5_, D1^2*D2*D4*D5_, D1*D2^2*D4*D5_, D1_*D2^2*D4*D5_,
      D2^3*D4*D5_, D1^2*D2_*D4*D5_, D1^2*D3*D4*D5_, D1*D2*D3*D4*D5_, D1_*D2*D3*D4*D5_, D2^2*D3*D4*D5_, D1*D2_*D3*D4*D5_, D1_*D3^2*D4*D5_, D2*D3^2*D4*D5_,
      D2_*D3^2*D4*D5_, D1^2*D3_*D4*D5_, D1*D2*D3_*D4*D5_, D2^2*D3_*D4*D5_, D1^2*D4^2*D5_, D4^3*D5_^2, D3*D4^2*D5_^2, D2*D4^2*D5_^2, D1*D4^2*D5_^2, D3^2*D4*D5_^2,
      D2*D3*D4*D5_^2, D1*D3*D4*D5_^2, D1*D2*D4^2*D5_, D2^2*D4*D5_^2, D1*D2*D4*D5_^2, D1^2*D4*D5_^2, D3^3*D5_^2, D2*D3^2*D5_^2, D1*D3^2*D5_^2, D2^2*D3*D5_^2,
      D1*D2*D3*D5_^2, D1^2*D3*D5_^2, D2^3*D5_^2, D1*D2^2*D5_^2, D1^2*D2*D5_^2, D3^3*D4_*D5_, D1_*D2*D3_*D4*D5, D2_^2*D3*D4*D5, D1_*D2*D4^2*D5_, D1*D2*D3*D4_*D5_,
      D1^2*D3*D4_*D5_, D2^3*D4_*D5_, D1*D2^2*D4_*D5_, D1^2*D2*D4_*D5_, D3_*D4^3*D5_, D2_*D4^3*D5_, D2*D4^3*D5_, D1_*D4^3*D5_, D1*D4^3*D5_, D2*D3_*D4^2*D5_,
      D1*D3_*D4^2*D5_, D2_*D3*D4^2*D5_, D2*D3*D4^2*D5_, D1_*D3*D4^2*D5_, D1*D2_*D4^2*D5_, D1*D2^2*D3_*D5_, D2_^2*D3*D5, D2*D3_*D4^2, D1_*D2^3, D1^3*D2_, D1^2*D2_^2,
      D1_^2*D2*D3, D1_*D2^2*D3, D1^2*D2_*D3, D1*D2_^2*D3, D1_^2*D3^2, D1_*D2*D3^2, D1*D2_*D3^2, D1_*D2_*D3^2, D2_^2*D3^2, D1_*D3^3, D2_*D3^3, D1^3*D3_, D1^2*D2*D3_,
      D1*D2^2*D3_, D1_*D2^2*D3_, D2^3*D3_, D1^2*D2_*D3_, D1^2*D3_^2, D1*D2*D3_^2, D2^2*D3_^2, D1_^2*D2*D4, D1_*D2^2*D4, D1^2*D2_*D4, D1*D2_^2*D4, D1_^2*D3*D4,
      D1_*D2*D3*D4, D1*D2_*D3*D4, D1_*D2_*D3*D4, D2_^2*D3*D4, D1_*D3^2*D4, D2_*D3^2*D4, D1^2*D3_*D4, D1*D2*D3_*D4, D1_*D2*D3_*D4, D2^2*D3_*D4, D1*D2_*D3_*D4,
      D1*D3_^2*D4, D2*D3_^2*D4, D1_^2*D4^2, D1_*D2*D4^2, D1*D2_*D4^2, D1_*D2_*D4^2, D2_^2*D4^2, D1_*D3*D4^2, D2_*D3*D4^2, D1*D3_*D4^2, D1_*D3_*D4^2, D1_^2*D2^2,
      D2_*D3_*D4^2, D3_^2*D4^2, D1_*D4^3, D2_*D4^3, D3_*D4^3, D1^3*D4_, D1^2*D2*D4_, D1*D2^2*D4_, D1_*D2^2*D4_, D2^3*D4_, D1^2*D2_*D4_, D1^2*D3*D4_, D1*D2*D3*D4_,
      D1_*D2*D3*D4_, D2^2*D3*D4_, D1*D2_*D3*D4_, D1*D3^2*D4_, D1_*D3^2*D4_, D2*D3^2*D4_, D2_*D3^2*D4_, D3^3*D4_, D1^2*D3_*D4_, D1*D2*D3_*D4_, D2^2*D3_*D4_, D1^2*D4_^2,
      D1*D2*D4_^2, D2^2*D4_^2, D1*D3*D4_^2, D2*D3*D4_^2, D3^2*D4_^2, D1_^2*D2*D5, D1_*D2^2*D5, D1^2*D2_*D5, D1*D2_^2*D5, D1_^2*D3*D5, D1_*D2*D3*D5, D1*D2_*D3*D5,
      D1_*D2_*D3*D5, D1*D4*D5_^2, D2*D4*D5_^2, D1_*D3^2*D5, D3*D4*D5_^2, D1^2*D3_*D5, D1*D2*D3_*D5, D1_*D2*D3_*D5, D2^2*D3_*D5, D1*D2_*D3_*D5, D1*D3_^2*D5, D2*D3_^2*D5,
      D1_^2*D4*D5, D1_*D2*D4*D5, D1*D2_*D4*D5, D1_*D2_*D4*D5, D2_^2*D4*D5, D1_*D3*D4*D5, D2_*D3*D4*D5, D1*D3_*D4*D5, D1_*D3_*D4*D5, D2*D3_*D4*D5, D2_*D3_*D4*D5,
      D3_^2*D4*D5, D2_*D3^2*D5, D1_*D4^2*D5, D2_*D4^2*D5, D3_*D4^2*D5, D1^2*D4_*D5, D1*D2*D4_*D5, D1_*D2*D4_*D5, D2^2*D4_*D5, D1*D2_*D4_*D5, D1*D3*D4_*D5,
      D1_*D3*D4_*D5, D2*D3*D4_*D5, D2_*D3*D4_*D5, D3^2*D4_*D5, D1*D3_*D4_*D5, D2*D3_*D4_*D5, D1*D4_^2*D5, D2*D4_^2*D5, D3*D4_^2*D5, D1_^2*D5^2, D1_*D2*D5^2,
      D1*D2_*D5^2, D1_*D2_*D5^2, D2_^2*D5^2, D1_*D3*D5^2, D2_*D3*D5^2, D1*D3_*D5^2, D1_*D3_*D5^2, D2*D3_*D5^2, D2_*D3_*D5^2, D3_^2*D5^2, D1_*D4*D5^2, D2_*D4*D5^2,
      D3_*D4*D5^2, D1*D4_*D5^2, D1_*D4_*D5^2, D2*D4_*D5^2, D2_*D4_*D5^2, D3*D4_*D5^2, D3_*D4_*D5^2, D4^2*D5_^2, D1^3*D5_, D1^2*D2*D5_, D1*D2^2*D5_, D1_*D2^2*D5_,
      D2^3*D5_, D1^2*D2_*D5_, D1^2*D3*D5_, D1*D2*D3*D5_, D1_*D2*D3*D5_, D2^2*D3*D5_, D1*D2_*D3*D5_, D1*D3^2*D5_, D1_*D3^2*D5_, D2*D3^2*D5_, D2_*D3^2*D5_, D3^3*D5_,
      D1^2*D3_*D5_, D1*D2*D3_*D5_, D2^2*D3_*D5_, D1^2*D4*D5_, D1*D2*D4*D5_, D1_*D2*D4*D5_, D2^2*D4*D5_, D1*D2_*D4*D5_, D1*D3*D4*D5_, D1_*D3*D4*D5_, D2*D3*D4*D5_,
      D2_*D3*D4*D5_, D3^2*D4*D5_, D1*D3_*D4*D5_, D2*D3_*D4*D5_, D1*D4^2*D5_, D1_*D4^2*D5_, D2*D4^2*D5_, D2_*D4^2*D5_, D3*D4^2*D5_, D3_*D4^2*D5_, D4^3*D5_, D1^2*D4_*D5_,
      D1*D2*D4_*D5_, D2^2*D4_*D5_, D1*D3*D4_*D5_, D2*D3*D4_*D5_, D3^2*D4_*D5_, D1^2*D5_^2, D1*D2*D5_^2, D2^2*D5_^2, D1*D3*D5_^2, D2*D3*D5_^2, D3^2*D5_^2, D4_^2*D5^2,
      D1_^2*D2, D1_*D4^2, D2_*D4^2, D3_*D4^2, D1^2*D4_, D1_^2*D3, D1*D2*D4_, D1_*D2*D4_, D2^2*D4_, D2_^2*D3, D1*D2_*D4_, D1*D3*D4_, D1_*D3*D4_, D1*D2*D3_, D2*D3*D4_,
      D2_*D3*D4_, D3^2*D4_, D1*D3_^2, D1*D3_*D4_, D1_*D2*D4, D1*D2_*D4, D1_*D2_*D4, D2_^2*D4, D1_*D3*D4, D2_*D3*D4, D1*D3_*D4, D1_*D3_*D4, D2*D3_*D4, D2_*D3_*D4,
      D3_^2*D4, D1_*D2^2, D1^2*D2_, D1*D2_^2, D1_*D2*D3, D1*D2_*D3, D1_*D2_*D3, D1_*D3^2, D2_*D3^2, D1^2*D3_, D1_*D2*D3_, D2^2*D3_, D1*D2_*D3_, D2*D3_^2, D1_^2*D4,
      D2*D3_*D4_, D1*D4_^2, D2*D4_^2, D3*D4_^2, D1_^2*D5, D1_*D2*D5, D1*D2_*D5, D1_*D2_*D5, D2_^2*D5, D1_*D3*D5, D2_*D3*D5, D1*D3_*D5, D1_*D3_*D5, D2*D3_*D5,
      D2_*D3_*D5, D3_^2*D5, D1_*D4*D5, D2_*D4*D5, D3_*D4*D5, D1*D4_*D5, D1_*D4_*D5, D2*D4_*D5, D2_*D4_*D5, D3*D4_*D5, D3_*D4_*D5, D4_^2*D5, D1_*D5^2, D2_*D5^2,
      D3_*D5^2, D4_*D5^2, D1^2*D5_, D1*D2*D5_, D1_*D2*D5_, D2^2*D5_, D1*D2_*D5_, D1*D3*D5_, D1_*D3*D5_, D2*D3*D5_, D2_*D3*D5_, D3^2*D5_, D1*D3_*D5_, D2*D3_*D5_,
      D1*D4*D5_, D1_*D4*D5_, D2*D4*D5_, D2_*D4*D5_, D3*D4*D5_, D3_*D4*D5_, D2*D4_*D5_, D1*D5_^2, D3*D4_*D5_, D3*D5_^2, D4*D5_^2, D4^2*D5_, D1*D4_*D5_, D2*D5_^2, D1*D5_,
      D3*D5_, D4*D5_, D2_*D5, D4_*D5, D2*D5_, D1_*D2, D1*D2_, D1_*D3, D2_*D3, D1*D3_, D2*D3_, D1_*D4, D2_*D4, D3_*D4, D1*D4_, D2*D4_, D3*D4_, D1_*D5, D3_*D5, D1^3*D2,
      D2^2*D3^2, D1*D2^3, D2^4, D1^2*D2*D3, D1*D2^2*D3, D2^3*D3, D1*D2*D3^2, D1^2*D2^2, D1^3*D4, D1^2*D2*D4, D1*D2^2*D4, D2^3*D4, D1^2*D3*D4, D1*D2*D3*D4, D2^2*D3*D4,
      D2*D3^2*D4, D1^2*D4^2, D1*D2*D4^2, D2^2*D4^2, D2*D3*D4^2, D2*D4^2*D5, D2*D4^3, D1*D2*D3*D5, D2^2*D3*D5, D1*D2*D4*D5, D2^2*D4*D5, D2*D3*D4*D5, D1*D4^3, D3^2*D5,
      D1*D2*D4, D1^2*D4, D3^3, D2^2*D5, D2*D3^2, D1*D3^2, D2^2*D3, D3*D4^2, D1*D2*D3, D1^2*D3, D2^3, D2*D3*D4, D2^2*D4, D2*D3*D5, D1*D3*D5, D1*D2*D5, D1^2*D5, D4^3,
      D2*D4^2, D1*D4^2, D3^2*D4, D1*D3*D4, D1*D2^2, D1^2*D2, D1^3, D1*D4*D5, D2*D4*D5, D3*D4*D5, D4^2*D5, D1*D5^2, D2*D5^2, D3*D5^2, D4*D5^2, D1^2, D1*D2, D2^2, D1*D3,
      D2*D3, D3^2, D1*D4, D2*D4, D4^2, D1*D5, D2*D5, D3*D5, D4*D5, D5^2, D3*D4, D4, D3, D1, D5, D2, 1, D5_, D4_, D3_, D2_, D1_, D5_^2, D4_*D5_, D3_*D5_, D2_*D5_,
      D1_*D5_, D4_^2, D3_*D4_, D2_*D4_, D1_*D4_, D3_^2, D2_*D3_, D1_*D3_, D2_^2, D1_*D2_, D1_^2 ], 692,
  [ D1^3*D2, D2^2*D3^2, D1*D2^3, D2^4, D1^2*D2*D3, D1*D2^2*D3, D2^3*D3, D1*D2*D3^2, D1^2*D2^2, D1^3*D4, D1^2*D2*D4, D1*D2^2*D4, D2^3*D4, D1^2*D3*D4, D1*D2*D3*D4,
      D2^2*D3*D4, D2*D3^2*D4, D1^2*D4^2, D1*D2*D4^2, D2^2*D4^2, D2*D3*D4^2, D2*D4^2*D5, D2*D4^3, D1*D2*D3*D5, D2^2*D3*D5, D1*D2*D4*D5, D2^2*D4*D5, D2*D3*D4*D5, D1*D4^3,
      D3^2*D5, D1*D2*D4, D1^2*D4, D3^3, D2^2*D5, D2*D3^2, D1*D3^2, D2^2*D3, D3*D4^2, D1*D2*D3, D1^2*D3, D2^3, D2*D3*D4, D2^2*D4, D2*D3*D5, D1*D3*D5, D1*D2*D5, D1^2*D5,
      D4^3, D2*D4^2, D1*D4^2, D3^2*D4, D1*D3*D4, D1*D2^2, D1^2*D2, D1^3, D1*D4*D5, D2*D4*D5, D3*D4*D5, D4^2*D5, D1*D5^2, D2*D5^2, D3*D5^2, D4*D5^2, D1^2, D1*D2, D2^2,
      D1*D3, D2*D3, D3^2, D1*D4, D2*D4, D4^2, D1*D5, D2*D5, D3*D5, D4*D5, D5^2, D3*D4, D4, D3, D1, D5, D2, 1, D5_, D4_, D3_, D2_, D1_, D5_^2, D4_*D5_, D3_*D5_, D2_*D5_,
      D1_*D5_, D4_^2, D3_*D4_, D2_*D4_, D1_*D4_, D3_^2, D2_*D3_, D1_*D3_, D2_^2, D1_*D2_, D1_^2 ], 84 ]
brk> range;
[ 103, 102, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69,
  68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57 ]
brk> m;
<A non-zero 21 x 46 matrix over an external ring>
brk> mat[5]{range};
[ D1_*D2_, D2_^2, D1_*D3_, D2_*D3_, D3_^2, D1_*D4_, D2_*D4_, D3_*D4_, D4_^2, D1_*D5_, D2_*D5_, D3_*D5_, D4_*D5_, D1_, D2_, D3_, D4_, D5_, 1, D2, D5, D1, D3, D4, D3*D4,
  D5^2, D4*D5, D3*D5, D2*D5, D1*D5, D4^2, D2*D4, D1*D4, D3^2, D2*D3, D1*D3, D2^2, D1*D2, D1^2, D4*D5^2, D3*D5^2, D2*D5^2, D1*D5^2, D4^2*D5, D3*D4*D5, D2*D4*D5 ]
brk> (mat[5]{range})[14];
D1_
brk> mm := CertainRows( m, ZeroRows( CertainColumns( m, [ 1 .. 13 ] ) ) );
<A 6 x 46 matrix over an external ring>
brk> IsZero( CertainColumns( mm, [ 1 .. 13 ] ) );
true
brk> IsZero( CertainColumns( mm, [ 1 .. 14 ] ) );
true
brk> IsZero( CertainColumns( mm, [ 1 .. 15 ] ) );
false
brk> mmm := CertainColumns( mm, [ 14 .. NumberColumns( mm ) ] );
<An unevaluated 6 x 33 matrix over an external ring>
brk> IsZero( CertainColumns( mmm, [ 1 ] ) );
true
brk> m;
<A non-zero 21 x 46 matrix over an external ring>
brk>
